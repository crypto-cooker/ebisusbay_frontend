options:
  docker: true
  size: 2x # 8GB steps by default
  # maximum amount of minutes a step can execute at a global level or at a step level
  max-time: 15

definitions:
  services:
    docker:
      memory: 10240 # default memory is 1024MB
      image: public.ecr.aws/docker/library/docker:dind

  install_tools: &install_tools
    apt-get update &&
    apt-get install -y gettext
  install_aws_cli: &install_aws_cli
    curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip" &&
    unzip awscliv2.zip &&
    ./aws/install &&
    aws --version
  aws_ecr_login: &aws_ecr_login
    aws ecr get-login-password | docker login --password-stdin --username AWS "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
  fetch_git_submodules: &fetch_git_submodules
    git submodule update --init --recursive

  # Docker BuildKit version
  # https://support.atlassian.com/bitbucket-cloud/docs/run-docker-commands-in-bitbucket-pipelines/#Docker-BuildKit-restrictions
  proxy_container_build: &proxy_container_build
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" ./apps/web/proxy/conf.d/web.conf &&
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" ./apps/web/proxy/conf.d/default.conf &&
    docker build --build-arg BUILDKIT_INLINE_CACHE=1 --platform linux/arm64 --cache-from ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${VERSION} -f ./apps/web/proxy/Dockerfile ./apps/web/proxy &&
    docker tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${VERSION} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER} &&
    docker push --all-tags ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}

pipelines:
  custom:
    deploy-to-testnet:
      - stage:
          name: testapp.ebisusbay.biz
          deployment: Testnet
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:20
                size: 4x # 16GB step
                runs-on:
                  - 'self.hosted'
                  - 'linux.arm64'
                  - 'web'
                services:
                  - docker
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # # Initialize, fetch and checkout any nested submodules
                  - *fetch_git_submodules
                  # RPC config
                  - cp -p ./apps/web/src/modules/market/assets/networks/rpc_config_testnet.json ./apps/web/src/modules/market/assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./apps/web/src/modules/market/assets/networks/rpc_config_testnet.json s3://test-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker build --platform linux/arm64 --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=${NEXT_PUBLIC_SENTRY_ENVIRONMENT} --build-arg SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} --build-arg NEXT_PUBLIC_WEB3MODAL_API_KEY=${NEXT_PUBLIC_WEB3MODAL_API_KEY} --cache-from ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} -f ./apps/web/Dockerfile .
                      docker tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER}
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push --all-tags ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_build
                  # deploy test-ebisusbay-web-arm64-us-east-1 / testapp.ebisusbay.biz
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"testnet\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    deploy-to-sandbox:
      - stage:
          name: sandboxapp.ebisusbay.biz
          deployment: Sandbox
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:20
                size: 4x # 16GB step
                runs-on:
                  - 'self.hosted'
                  - 'linux.arm64'
                  - 'web'
                services:
                  - docker
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  - cp -p ./src/modules/market/assets/networks/rpc_config_dev.json ./src/modules/market/assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/modules/market/assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker build --platform linux/arm64 --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=${NEXT_PUBLIC_SENTRY_ENVIRONMENT} --build-arg SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} --build-arg NEXT_PUBLIC_WEB3MODAL_API_KEY=${NEXT_PUBLIC_WEB3MODAL_API_KEY} --cache-from ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} -f Dockerfile .
                      docker tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER}
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push --all-tags ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_build
                  # deploy sandbox-ebisusbay-web-arm64-us-east-1 / sandboxapp.ebisusbay.biz
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"sandbox\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    when-shit-hits-the-fan-prod:
      - stage:
          name: app.ebisusbay.com
          deployment: Production
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:20
                size: 4x # 16GB step
                runs-on:
                  - 'self.hosted'
                  - 'linux.arm64'
                  - 'web'
                services:
                  - docker
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  # - cp -p ./src/modules/market/assets/networks/rpc_config_dev.json ./src/modules/market/assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/modules/market/assets/networks/rpc_config.json s3://prod-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker build --platform linux/arm64 --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=${NEXT_PUBLIC_SENTRY_ENVIRONMENT} --build-arg SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} --build-arg NEXT_PUBLIC_WEB3MODAL_API_KEY=${NEXT_PUBLIC_WEB3MODAL_API_KEY} --cache-from ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} -f Dockerfile .
                      docker tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER}
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push --all-tags ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_build
                  # deploy prod-ebisusbay-web-arm64-us-east-1 / app.ebisusbay.com
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"type\":\"pipeline_ref_target\",\"ref_type\":\"branch\",\"ref_name\":\"prod\",\"selector\":{\"type\":\"custom\",\"pattern\":\"fast_hotfix_deployment_prod\"}}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
  branches:
    dev:
      - stage:
          name: app.ebisusbay.biz
          deployment: Development
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:20
                size: 4x # 16GB step
                runs-on:
                  - 'self.hosted'
                  - 'linux.arm64'
                  - 'web'
                services:
                  - docker
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  - cp -p ./src/modules/market/assets/networks/rpc_config_dev.json ./src/modules/market/assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/modules/market/assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker build --platform linux/arm64 --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=${NEXT_PUBLIC_SENTRY_ENVIRONMENT} --build-arg SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} --build-arg NEXT_PUBLIC_WEB3MODAL_API_KEY=${NEXT_PUBLIC_WEB3MODAL_API_KEY} --cache-from ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} -f Dockerfile .
                      docker tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER}
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push --all-tags ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_build
                  # deploy dev-ebisusbay-web-arm64-us-east-1 / app.ebisusbay.biz
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"dev\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    prod:
      - stage:
          name: app.ebisusbay.com
          deployment: Production
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:20
                size: 4x # 16GB step
                runs-on:
                  - 'self.hosted'
                  - 'linux.arm64'
                  - 'web'
                services:
                  - docker
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  # - cp -p ./src/modules/market/assets/networks/rpc_config_dev.json ./src/modules/market/assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/modules/market/assets/networks/rpc_config.json s3://prod-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker build --platform linux/arm64 --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=${NEXT_PUBLIC_SENTRY_ENVIRONMENT} --build-arg SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} --build-arg NEXT_PUBLIC_WEB3MODAL_API_KEY=${NEXT_PUBLIC_WEB3MODAL_API_KEY} --cache-from ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} -f Dockerfile .
                      docker tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER}
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push --all-tags ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_build
                  # deploy prod-ebisusbay-web-arm64-us-east-1 / app.ebisusbay.com
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"prod\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'