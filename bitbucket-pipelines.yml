options:
  docker: true
  size: 2x
  # maximum amount of minutes a step can execute at a global level or at a step level
  max-time: 15

definitions:
  services:
    docker:
      # default memory is 1024MB
      # The total memory for services on each pipeline step must not exceed the remaining memory, which is 3072/7128 MB for 1x/2x steps respectively.
      memory: 4096
      image: public.ecr.aws/docker/library/docker:dind
  caches:
    nextcache: .next/cache

  install_tools: &install_tools
    apt-get update &&
    apt-get install -y gettext
  install_aws_cli: &install_aws_cli
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" &&
    unzip awscliv2.zip &&
    ./aws/install &&
    aws --version
  upgrade_npm: &upgrade_npm
    npm install -g npm@latest
  print_versions: &print_versions
    node --version && npm --version
  aws_ecr_login: &aws_ecr_login
    aws ecr get-login-password | docker login --password-stdin --username AWS "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
  app_build: &app_build
    CI=false NEXT_PUBLIC_ENV=$NEXT_PUBLIC_ENV NEXT_PUBLIC_SITE24X7_KEY=$NEXT_PUBLIC_SITE24X7_KEY NEXT_PUBLIC_SENTRY_DSN=$NEXT_PUBLIC_SENTRY_DSN npm run build

  # Docker Buildx version
  docker_buildx: &docker_buildx
    docker pull docker/buildx-bin:latest &&
    docker container create --name buildx docker/buildx-bin:latest docker buildx version &&
    mkdir -p /usr/libexec/docker/cli-plugins/ &&
    docker container cp buildx:/buildx /usr/libexec/docker/cli-plugins/docker-buildx &&
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes &&
    docker buildx create --name custom-builder --driver=docker-container --use --bootstrap &&
    docker buildx version
  proxy_container_buildx: &proxy_container_buildx
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" proxy/conf.d/web.conf &&
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" proxy/conf.d/default.conf &&
    docker buildx build --builder=custom-builder --push --platform linux/amd64 --cache-to type=inline --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER} -f proxy/Dockerfile ./proxy

pipelines:
  custom:
    deploy-to-testnet:
      - stage:
          name: testapp.ebisusbay.biz
          deployment: Testnet
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:18
                runs-on:
                  - 'self.hosted'
                  - 'linux'
                  - 'web'
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  - cp -p ./src/Assets/networks/rpc_config_testnet.json ./src/Assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/Assets/networks/rpc_config_testnet.json s3://test-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  # Install and configure Docker Buildx
                  - *docker_buildx
                  - docker buildx ls
                  - docker buildx inspect custom-builder
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker buildx build --builder=custom-builder --push --platform linux/amd64 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --cache-to type=inline --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:cache --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER} -f Dockerfile .
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_buildx
                  # deploy test-ebisusbay-web-amd64-us-east-1 / testapp.ebisusbay.biz
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"testnet\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    deploy-to-sandbox:
      - stage:
          name: sandboxapp.ebisusbay.biz
          deployment: Sandbox
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:18
                runs-on:
                  - 'self.hosted'
                  - 'linux'
                  - 'web'
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/Assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  # Install and configure Docker Buildx
                  - *docker_buildx
                  - docker buildx ls
                  - docker buildx inspect custom-builder
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker buildx build --builder=custom-builder --push --platform linux/amd64 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --cache-to type=inline --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:cache --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER} -f Dockerfile .

                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_buildx
                  # deploy sandbox-ebisusbay-web-amd64-us-east-1 / sandboxapp.ebisusbay.biz
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"sandbox\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    when-shit-hits-the-fan-prod:
      - stage:
          name: app.ebisusbay.com
          deployment: Production
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:18
                runs-on:
                  - 'self.hosted'
                  - 'linux'
                  - 'web'
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  # - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/Assets/networks/rpc_config.json s3://prod-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  # Install and configure Docker Buildx
                  - *docker_buildx
                  - docker buildx ls
                  - docker buildx inspect custom-builder
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker buildx build --builder=custom-builder --push --platform linux/amd64 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --cache-to type=inline --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:cache --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER} -f Dockerfile .
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_buildx
                  # deploy prod-ebisusbay-web-amd64-us-east-1 / app.ebisusbay.com
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"type\":\"pipeline_ref_target\",\"ref_type\":\"branch\",\"ref_name\":\"prod\",\"selector\":{\"type\":\"custom\",\"pattern\":\"fast_hotfix_deployment_prod\"}}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
  branches:
    master:
      - stage:
          name: container-cache-build
          deployment: Development
          steps:
            - step:
                name: Build container cache image
                image: public.ecr.aws/docker/library/node:18
                runs-on:
                  - 'self.hosted'
                  - 'linux'
                  - 'web'
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/Assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  # Install and configure Docker Buildx
                  - *docker_buildx
                  - docker buildx ls
                  - docker buildx inspect custom-builder
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker buildx build --builder=custom-builder --push --platform linux/amd64 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --cache-to type=inline --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:cache --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:cache -f Dockerfile .

                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_buildx
    dev:
      - stage:
          name: app.ebisusbay.biz
          deployment: Development
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:18
                runs-on:
                  - 'self.hosted'
                  - 'linux'
                  - 'web'
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/Assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  # Install and configure Docker Buildx
                  - *docker_buildx
                  - docker buildx ls
                  - docker buildx inspect custom-builder
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker buildx build --builder=custom-builder --push --platform linux/amd64 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --cache-to type=inline --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:cache --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER} -f Dockerfile .

                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_buildx
                  # deploy dev-ebisusbay-web-amd64-us-east-1 / app.ebisusbay.biz
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"dev\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    prod:
      - stage:
          name: app.ebisusbay.com
          deployment: Production
          steps:
            - step:
                name: Build & deploy
                image: public.ecr.aws/docker/library/node:18
                runs-on:
                  - 'self.hosted'
                  - 'linux'
                  - 'web'
                script:
                  # Enable Docker Buildkit
                  - export DOCKER_BUILDKIT=1
                  # Install required tools
                  - *install_tools
                  # Install AWS CLI
                  - *install_aws_cli
                  # RPC config
                  # - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
                  # Login to ECR
                  - *aws_ecr_login
                  # Copy RPC config to Admin S3 Bucket
                  - aws s3 cp ./src/Assets/networks/rpc_config.json s3://prod-ebisusbay-admin-storage/rpc_config.json
                  # Build application container
                  # Install and configure Docker Buildx
                  - *docker_buildx
                  - docker buildx ls
                  - docker buildx inspect custom-builder
                  - |
                      set +e # turn off error-trapping

                      # Inline cache
                      docker buildx build --builder=custom-builder --push --platform linux/amd64 --build-arg NEXT_PUBLIC_ENV=${NEXT_PUBLIC_ENV} --build-arg NEXT_PUBLIC_SITE24X7_KEY=${NEXT_PUBLIC_SITE24X7_KEY} --build-arg NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} --cache-to type=inline --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:cache --cache-from type=registry,ref=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION} --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}-build-${BITBUCKET_BUILD_NUMBER} -f Dockerfile .
                      RETURN_CODE=$?

                      if [ $RETURN_CODE -eq 0 ]; then
                        echo ""************BUILD OK, pushing container image..."************"
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${VERSION}
                      else
                        echo "************BUILD FAILED************"
                        exit 1
                      fi

                      set -e # turn on error-trapping
                  # Build proxy container
                  - *proxy_container_buildx
                  # deploy prod-ebisusbay-web-amd64-us-east-1 / app.ebisusbay.com
                  - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"prod\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'