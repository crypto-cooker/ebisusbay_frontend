import axios from "axios";
const api = axios.create({
  baseURL: 'api/',
});

const baseURL = 'https://testcms.ebisusbay.biz/';

//gets the current game id
export const getWeeklyGameId = async () => {
  try{
    var data = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    return data.data.data.id;
  }
  catch(error){
    throw error;
  }
}
export const getPreviousGame = async () => {
  try{
    var currentGame = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    var data = await api.get(baseURL + "api/ryoshi-dynasties/games/"+Number(currentGame.data.data.id-1));
    return data.data.data;
  }
  catch(error){
    throw error;
  }
}
export const getSeasonGameId = async () => {
  try{
    var data = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    return data.data.data.parent.id;
  }
  catch(error){
    throw error;
  }
}
export const getWeekEndDate = async () => {
  try{
    var data = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    return data.data.data.endAt;
  }
  catch(error){
    throw error;
  }
}
//gets the map for the game
export const getMap = async (_gameNumber) => {
  try{
    var data = await getSeasonGameId();
    return await api.get(baseURL + "api/ryoshi-dynasties/games/"+data);
  }
  catch(error){
    throw error;
  }
}
export const getProfileTroops = async (_address, _signature) => {
  try{
    var data = await api.get(baseURL + "api/ryoshi-dynasties/armies?",
      {params: {address: _address, signature: _signature}});

    //itterate through the data and get the troops without a control point
    var troops = 0;
    data.data.data.forEach(element => {
      if(element.controlPointId == null){
        troops += element.troops;
      }
      // console.log(element.controlPointId)
    });
    return troops;
  }
  catch(error){
    throw error;
  }
}
export const getProfileArmies = async (_address, _signature) => {
  try{
    var data = await api.get(baseURL + "api/ryoshi-dynasties/armies?",
      {params: {address: _address, signature: _signature}});
    return data;
  }
  catch(error){
    throw error;
  }
}
//creates a faction
export const createFaction = async (address, signature, type, name, addresses=[], image) => {
  try{
    return await api.post(baseURL + "api/ryoshi-dynasties/factions?", 
      {name, type, addresses, image},
      {params: {address, signature}});
  }
  catch(error){
    throw error;
  }
}
export const UploadFactionIconPfp = async (address, signature, name, image) => {
  try{
    console.log(address, signature, name, image);
    return await api.patch(baseURL + "api/ryoshi-dynasties/factions?", 
      {name, id, image},
      {params: {address, signature}});
  }
  catch(error){
    throw error;
  }
}
//gets specific factions
export const getFactionsOwned = async (address, signature) => {
  try{
    return await api.get(baseURL + "api/ryoshi-dynasties/factions?", 
      {params: {address, signature}});
  }
  catch(error){
    throw error;
  }
}
export const getFactionsRegistered = async (address, signature) => {
  try{
    var gameId = await getSeasonGameId();
    return await api.get(baseURL + "api/ryoshi-dynasties/factions?", 
      {params: {address, signature, gameId}});
  }
  catch(error){
    throw error;
  }
}
//registers a faction for the season
export const subscribeFaction = async (address, signature, factionId) => {
  try{
    var gameId = await getSeasonGameId();
    return await api.post(baseURL + "api/ryoshi-dynasties/subscriptions?", 
      {gameId, factionId},
      {params: {address, signature}}
      );
  }
  catch(error){
    throw error;
  }
}
export const editFaction = async (address, signature, id, name, addresses=[], type) => {
  try{
    return await api.patch(baseURL + "api/ryoshi-dynasties/factions?", 
      {name, id, addresses, type},
      {params: {address: address, signature: signature}},
      );
  }
  catch(error){
    throw error;
  }
}
export const deleteFaction = async (address, signature, id) => {
  try{
    return await api.delete(baseURL + "api/ryoshi-dynasties/factions?", 
      {params: {address, signature, id}},
      );
  }
  catch(error){
    throw error;
  }
}
export const getFactionTroops= async (address, signature, factionId) => {
  try{
    var data = await api.get(baseURL + "api/ryoshi-dynasties/factions/"+factionId,
    {params: {address, signature}});
    return data.data.data.troops;
  }
  catch(error){
    throw error;
  }
}
//adds troops to the player's wallet
export const createArmy = async (_walletAddress, _walletSignature, _troops) => {
  try{
    return await api.get(baseURL + "api/ryoshi-dynasties/army?", 
      {params: {walletAddress: _walletAddress, walletSignature: _walletSignature}},
      {body: {troops: _troops}});
  }
  catch(error){
    throw error;
  }
}
//takes troops from a player's wallet and adds them to a faction
export const delegateTroops = async (address, signature, troops, factionId) => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    let gameId = gameID.data.data.id;

    // console.log("GameID: "+gameId);
    // console.log("FactionID: "+factionId);
    // console.log("Troops: "+troops);
    troops = Number(troops);

    return await api.patch(baseURL + "api/ryoshi-dynasties/armies?", 
      {troops, factionId, gameId},
      {params: {address: address, signature: signature, action: "DELEGATE"}},
      );
  }
  catch(error){
    throw error;
  }
}
//deploys troops from a faction to a control point
export const deployTroops = async (address, signature, troops, controlPointId, factionId) => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    var gameId = gameID.data.data.id;
    
    // console.log("Troops: "+troops);
    troops = Number(troops);
    // console.log("ControlPointID: "+controlPointId);
    // console.log("GameID: "+gameId);
    // console.log("FactionID: "+factionId);
    
    // console.log("Address: "+address);
    // console.log("Signature: "+signature);

    return await api.patch(baseURL + "api/ryoshi-dynasties/armies?", 
      {troops, controlPointId, gameId, factionId},
      {params: {address: address, signature: signature, action: "DEPLOY"}}
      );
  }
  catch(error){
    throw error;
  }
}
//recalls troops from a control point and returns them to the faction
export const recallTroops = async (address, signature, troops, controlPointId, factionId) => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");

    return await api.patch(baseURL + "api/ryoshi-dynasties/armies?", 
      {params: {address, signature, action: "RECALL"}},
      {body: {troops, controlPointId, gameId: gameID.data.data.id, factionId}});
  }
  catch(error){
    throw error;
  }
}
export const getReward= async (_rewardNumber) => {
  try{
    var data = await api.get(baseURL + "api/ryoshi-dynasties/rewards/"+_rewardNumber);
    return data.data.data;
  }
  catch(error){
    throw error;
  }
}
//fix to get profile troops
export const getProfileId = async (_address, _signature) => {
  try{
    //add if else for if it is empty
    var data = await api.get(baseURL + "api/ryoshi-dynasties/armies?",
      {params: {address: _address, signature: _signature}});
    return data;
  }
  catch(error){
    throw error;
  }
}
export const getAllFactions = async () => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    var data = await api.get(baseURL + "api/ryoshi-dynasties/control-points/1",
      {params: {gameId: gameID.data.data.id}});
    return data.data.data.leaderBoard;
  }
  catch(error){
    throw error;
  }
}
export const addTroops = async (address, signature, troops) => {
  try{
    return await api.post(baseURL + "api/ryoshi-dynasties/armies?", 
      {troops},
      {params: {address, signature}});
  }
  catch(error){
    throw error;
  }
}
export const getRegions= async () => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    var regions = gameID.data.data.parent.map.regions;
    return regions;
  }
  catch(error){
    throw error;
  }
}
export const getControlPoints= async (regionNumber) => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    var regions = gameID.data.data.parent.map.regions;
    //get all control points under regions
    var controlPoints = [];
    regions[regionNumber].controlPoints.forEach((controlPoint) => {
      controlPoints.push(controlPoint.id);
    });
    return controlPoints;
  }
  catch(error){
    throw error;
  }
}

export const getLeaderBoard = async (controlPointId) => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    // console.log(gameID.data.data);
    var data = await api.get(baseURL + "api/ryoshi-dynasties/control-points/"+controlPointId,
      {params: {gameId: Number(gameID.data.data.id-1)}});
    // console.log(data);
    return data.data.data.leaderBoard;
  }
  catch(error){
    throw error;
  }
}
//gets a specific control point
export const getControlPoint = async (controlPointId) => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    var data = await api.get(baseURL + "api/ryoshi-dynasties/control-points/"+controlPointId,
      {params: {gameId: gameID.data.data.id}});
    // console.log(data);
    return data.data.data;
  }
  catch(error){
    throw error;
  }
}
export const attack = async (address, signature, troops, controlPointId, factionId, defendingFactionId) => {
  try{
    var gameID = await api.get(baseURL + "api/ryoshi-dynasties/games/0");
    var gameId = gameID.data.data.id;

    return await api.post(baseURL + "api/ryoshi-dynasties/battle-transactions?", 
      {troops, controlPointId, gameId, factionId, defendingFactionId},
      {params: {address, signature}}
      );
  }
  catch(error){
    throw error;
  }
}